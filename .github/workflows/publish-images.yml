name: Build and publish Docker images

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push multi-arch base image (with cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-base:latest
          file: docker/base/Dockerfile
          cache-from: |
            type=gha
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-base:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-base:buildcache,mode=max

      - name: Build and push diarization image (with cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-diarization:latest
          file: docker/diarization/Dockerfile
          cache-from: |
            type=gha
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-diarization:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-diarization:buildcache,mode=max

      - name: Build and push ASR image (with cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-asr:latest
          file: docker/asr/Dockerfile
          cache-from: |
            type=gha
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-asr:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-asr:buildcache,mode=max

      - name: Build and push NER image (with cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-ner:latest
          file: docker/ner/Dockerfile
          cache-from: |
            type=gha
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-ner:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-ner:buildcache,mode=max

  smoke-test:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull and run smoke tests
        run: |
          set -eux
          IMAGES=(base diarization asr ner)
          for img in "${IMAGES[@]}"; do
            ref="${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-${img}:latest"
            echo "\n--- Testing $ref ---"
            docker pull "$ref"
            # Run a short python readiness check inside the image
            docker run --rm "$ref" python -c "print('ready')"
          done

      - name: Show pushed cache image digests
        run: |
          set -eux
          IMAGES=(base diarization asr ner)
          for img in "${IMAGES[@]}"; do
            ref="${{ secrets.DOCKERHUB_USERNAME }}/cp-whisperx-app-${img}:buildcache"
            echo "Inspecting cache ref: $ref"
            # Try manifest inspect (works without pulling image) to show digest
            docker manifest inspect "$ref" || echo "manifest inspect failed for $ref"
          done
